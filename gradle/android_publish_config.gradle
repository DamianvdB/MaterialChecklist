if (!project.rootProject.file("local.properties").exists()) {
    logger.warn("local.properties not found. Skipping Bintray Release setup.")
    return
}

def getBintrayUserAndKey() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file("local.properties").newDataInputStream())
    return [
            properties.getProperty("bintray.user"),
            properties.getProperty("bintray.apikey")
    ]
}

task checkBintrayConfig {
    doLast {
        def (user, key) = getBintrayUserAndKey()
        if (user == null || user.isEmpty() ||
                key == null || key.isEmpty()) {
            throw new IllegalStateException("Must specify Bintray user/API key in your local.properties.")
        }
    }
}

if (versions == null || versions.publish_version == null) {
    throw new IllegalStateException("Unable to reference publish_version.")
}

apply plugin: "com.jfrog.bintray"

group GROUP
version versions.publish_version

afterEvaluate {
    apply plugin: "maven-publish"

    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption("Xdoclint:none", "-quiet")
            }
        }
    }

    task androidJavadocs(type: Javadoc) {
        failOnError = false
        source = android.sourceSets.main.java.source
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = "javadoc"
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = "sources"
        from android.sourceSets.main.java.source
    }

    def (userName, apiKey) = getBintrayUserAndKey()
    bintray {
        user = userName
        key = apiKey
        publications = ["release"]
        configurations = ["archives"]
        override = true
        pkg {
            repo = "maven"
            name = POM_NAME
            desc = POM_DESCRIPTION

            websiteUrl = POM_URL
            issueTrackerUrl = POM_SCM_URL_ISSUES
            vcsUrl = POM_SCM_URL

            publicDownloadNumbers = true
            licenses = ["Apache-2.0"]
            version {
                name = versions.publish_version
                desc = "Version ${versions.publish_version}"
                released = new Date()
                vcsTag = versions.publish_version
            }
        }
    }

    def pomConfig = {
        licenses {
            license {
                name POM_LICENCE_NAME
                url POM_LICENCE_URL
                distribution POM_LICENCE_DIST
            }
        }

        developers {
            developer {
                id POM_DEVELOPER_ID
                name POM_DEVELOPER_NAME
                email POM_DEVELOPER_EMAIL
            }
        }

        scm {
            url POM_SCM_URL
            connection POM_SCM_CONNECTION
            developerConnection POM_SCM_DEV_CONNECTION
        }
    }

    publishing {
        publications {
            release(MavenPublication) {
                // Applies the component for the release build variant.
                from components.release

                artifact androidSourcesJar
                artifact androidJavadocsJar

                groupId = GROUP
                artifactId = POM_ARTIFACT_ID
                version = versions.publish_version

                pom.withXml {
                    asNode().appendNode("name", POM_NAME)
                    asNode().appendNode("description", POM_DESCRIPTION)
                    asNode().appendNode("url", POM_SCM_URL)
                    asNode().children().last() + pomConfig
                }
            }
        }
    }
}