if (versions == null || versions.publish_version == null) {
    throw new IllegalStateException("Unable to reference publish_version.")
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    new FileInputStream(secretPropsFile).withCloseable { is ->
        p.load(is)
    }
    p.each { name, value ->
        ext[name] = value
    }
} else {
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
}

group GROUP
version versions.publish_version

afterEvaluate {
    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption("Xdoclint:none", "-quiet")
            }
        }
    }

    task androidJavadocs(type: Javadoc) {
        failOnError = false
        source = android.sourceSets.main.java.source
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = "javadoc"
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = "sources"
        from android.sourceSets.main.java.source
    }

    def pomConfig = {
        licenses {
            license {
                name POM_LICENCE_NAME
                url POM_LICENCE_URL
                distribution POM_LICENCE_DIST
            }
        }

        developers {
            developer {
                id POM_DEVELOPER_ID
                name POM_DEVELOPER_NAME
                email POM_DEVELOPER_EMAIL
            }
        }

        scm {
            url POM_SCM_URL
            connection POM_SCM_CONNECTION
            developerConnection POM_SCM_DEV_CONNECTION
        }
    }

    publishing {
        publications {
            release(MavenPublication) {
                // Applies the component for the release build variant.
                from components.release

                artifact androidSourcesJar
                artifact androidJavadocsJar

                groupId = GROUP
                artifactId = POM_ARTIFACT_ID
                version = versions.publish_version

                pom.withXml {
                    asNode().appendNode("name", POM_NAME)
                    asNode().appendNode("description", POM_DESCRIPTION)
                    asNode().appendNode("url", POM_SCM_URL)
                    asNode().children().last() + pomConfig
                }
            }
        }

        repositories {
            maven {
                name = "sonatype"
                def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }
}

signing {
    sign publishing.publications
}
